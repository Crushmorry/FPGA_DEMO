#include "oled.h"



u8 OLED_GRAM[128][4];

//写命令
void write_cmd(u8 command)
{

	Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR)&( ~ (1 << DC)));
	for (u8 i = 0; i < 8; ++i)
	{
		Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) & ( ~ (1 << SCLK)));
		if(command & 0x80)
		{
			Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << SDIN));
		}
		else
		{
			Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) & ( ~(1 << SDIN)));
		}
		Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << SCLK));
		command << 1;
	}
}


//写数据
void write_data(u8 data)
{
	Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << DC));
	for (u8 i = 0; i < 8; ++i)
	{
		Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) & ( ~ (1 << SCLK)));
		if(data & 0x80)
		{
			Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << SDIN));
		}
		else
		{
			Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) & ( ~(1 << SDIN)));
		}
		Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << SCLK));
		data << 1;
	}
}


//更新显存到OLED
void oled_refresh_gram()
{
	for (u8 i = 0; i < 4; ++i)
	{
		write_cmd(0xb0 + i);	//设置页地址 (0~3)   因为zedboard板载的OLED是128x32的所以4个页即可，SSD1306本身是有8个页的
		write_cmd(0x00);		//设置列低地址
		write_cmd(0x10);		//设置列高地址
		for (u8 j = 0; j < 128; ++j) {
			write_data(OLED_GRAM[j][i]);
		}
	}
}

//清空OLED,即设为全黑
void oled_clear()
{
	for (u8 i = 0; i < 4; ++i)
	{
		for (u8 j = 0; j < 128; ++j)
		{
			OLED_GRAM[j][i] = 0x00;
		}
	}
	oled_refresh_gram();
}

void draw_point(u8 x, u8 y, u8 flag)
{
	u8 y0, temp;
	//超范围
	if(x > 127 || y > 31)
		return;
	y0 = y / 8;	//对应到页
	temp = 1 << (y % 8); //u8类型的数代表一列，左移n位代表操作这一个u8类型数的第n位，也就是这一列的第n个像素点
	//判断写入高电平还是低电平
	if(flag)
		OLED_GRAM[x][y0]|=temp;
	else
		OLED_GRAM[x][y0]&=~temp;

}

//输出16位字高的字符串
void show_string_16(u8 x, u8 y, u8* string)
{
	while(*string != '\0')
	{
		//超过一行的最大值就换行
		if(x > MAX_CHAR_POSX_8)
		{
			x = 0;
			y += 16;
		}
		//超过最后一行就从第0行重新开始
		if(y > MAX_CHAR_POSY_16)
		{
			x = 0;
			y = 0;
		}
		draw_char(x, y, *string);
		x += 8;
		string++;
	}
}



void show_char(u8 x, u8 y, u8 data, u8 size, u8 mode)
{

}

void oled_init()
{
	Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << VDD));
	usleep(300);
	Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) & ( ~(1 << RES)));
	usleep(300);
	Xil_Out32(OLED_BASE_ADDR, Xil_In32(OLED_BASE_ADDR) | (1 << RES));
	usleep(300);

	
	write_cmd(0xAE);	//关闭面板显示

	write_cmd(0x40);	//设置起始行
	write_cmd(0x81);	//设置对比度
	write_cmd(0xc0);	//no-mapping
	write_cmd(0xAF);	//打开面板显示
}
