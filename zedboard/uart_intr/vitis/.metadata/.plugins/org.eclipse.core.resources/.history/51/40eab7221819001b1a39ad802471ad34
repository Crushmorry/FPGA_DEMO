/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "stdio.h"
#include "xparameters.h"
#include "xuartps.h"
#include "xscugic.h"
#include "xgpio.h"
#include "sleep.h"

#define UART_DEVICE_1__ID XPAR_PS7_UART_1_DEVICE_ID
#define UART_INTR_ID XPAR_XUARTPS_1_INTR
#define SCUGIC_DEVICE_ID XPAR_PS7_SCUGIC_0_DEVICE_ID

void uart_intr_handler(void* callback);
int main()
{
	XUartPs uart;
	XUartPs_Config *uart_cfg;
	uart_cfg = XUartPs_LookupConfig(UART_DEVICE_1__ID);
	XUartPs_CfgInitialize(&uart, uart_cfg, uart_cfg->BaseAddress);
	int status = XUartPs_SelfTest(uart_ps);
	if (status != XST_SUCCESS)
		return XST_FAILURE;
	XUartPs_SetBaudRate(&uart, 9600);
	XUartPs_SetOperMode(&uart, XUARTPS_OPER_MODE_NORMAL);
	XUartPs_SetFifoThreshold(&uart, 1);
	XUartPs_SetInterruptMask(&uart, XUARTPS_IXR_RXOVR);

	printf("hello");

	XScuGic scugic;
	XScuGic_Config *scugic_cfg;
	scugic_cfg = XScuGic_LookupConfig(SCUGIC_DEVICE_ID);
	XScuGic_CfgInitialize(&scugic, scugic_cfg, scugic_cfg->CpuBaseAddress);
	XScuGic_Connect(&scugic, UART_INTR_ID, uart_intr_handler, &uart);
	XScuGic_Enable(&scugic, UART_INTR_ID);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &uart);
	Xil_ExceptionEnable();

	while(1);

    return 0;
}

void uart_intr_handler(void* callback)
{
	XUartPs* uart = (XUartPs*) callback;
	u32 data;
	printf("((()))");
	//读取中断 ID 寄存器，判断触发的是哪种中断
	u32 status = XUartPs_ReadReg(uart->Config.BaseAddress,XUARTPS_IMR_OFFSET);
	status &= XUartPs_ReadReg(uart->Config.BaseAddress,XUARTPS_ISR_OFFSET);

	if(status & (u32)XUARTPS_IXR_RXOVR)
	{
		data = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);
		//清除中断标志
		XUartPs_WriteReg(uart->Config.BaseAddress,XUARTPS_ISR_OFFSET,XUARTPS_IXR_RXOVR);
	}
	XUartPs_SendByte(XPAR_PS7_UART_1_BASEADDR,data);
}
